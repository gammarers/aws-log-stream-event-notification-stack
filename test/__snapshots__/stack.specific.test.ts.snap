// Jest Snapshot v1, https://goo.gl/fbAQLP

exports[`LogStreamEventNotificationStack default Testing Should match snapshot 1`] = `
{
  "Parameters": {
    "BootstrapVersion": {
      "Default": "/cdk-bootstrap/hnb659fds/version",
      "Description": "Version of the CDK Bootstrap resources in this environment, automatically retrieved from SSM Parameter Store. [cdk:skip]",
      "Type": "AWS::SSM::Parameter::Value<String>",
    },
  },
  "Resources": {
    "AwsLambdaExamplex1afuncLogGroupSubscription85F8E41E": {
      "DependsOn": [
        "AwsLambdaExamplex1afuncLogGroupSubscriptionCanInvokeLambdaF70CA12E",
      ],
      "Properties": {
        "DestinationArn": {
          "Fn::GetAtt": [
            "LogStreamEventTriggerParserFunction924F8116",
            "Arn",
          ],
        },
        "FilterPattern": "{ ($.level = "ERROR") || ($.level = "WARN") }",
        "LogGroupName": "/aws/lambda/example-x1a-func",
      },
      "Type": "AWS::Logs::SubscriptionFilter",
    },
    "AwsLambdaExamplex1afuncLogGroupSubscriptionCanInvokeLambdaF70CA12E": {
      "Properties": {
        "Action": "lambda:InvokeFunction",
        "FunctionName": {
          "Fn::GetAtt": [
            "LogStreamEventTriggerParserFunction924F8116",
            "Arn",
          ],
        },
        "Principal": "logs.amazonaws.com",
        "SourceArn": {
          "Fn::Join": [
            "",
            [
              "arn:",
              {
                "Ref": "AWS::Partition",
              },
              ":logs:",
              {
                "Ref": "AWS::Region",
              },
              ":",
              {
                "Ref": "AWS::AccountId",
              },
              ":log-group:/aws/lambda/example-x1a-func:*",
            ],
          ],
        },
      },
      "Type": "AWS::Lambda::Permission",
    },
    "AwsLambdaExamplex2afuncLogGroupSubscriptionCanInvokeLambdaAED66121": {
      "Properties": {
        "Action": "lambda:InvokeFunction",
        "FunctionName": {
          "Fn::GetAtt": [
            "LogStreamEventTriggerParserFunction924F8116",
            "Arn",
          ],
        },
        "Principal": "logs.amazonaws.com",
        "SourceArn": {
          "Fn::Join": [
            "",
            [
              "arn:",
              {
                "Ref": "AWS::Partition",
              },
              ":logs:",
              {
                "Ref": "AWS::Region",
              },
              ":",
              {
                "Ref": "AWS::AccountId",
              },
              ":log-group:/aws/lambda/example-x2a-func:*",
            ],
          ],
        },
      },
      "Type": "AWS::Lambda::Permission",
    },
    "AwsLambdaExamplex2afuncLogGroupSubscriptionE8893324": {
      "DependsOn": [
        "AwsLambdaExamplex2afuncLogGroupSubscriptionCanInvokeLambdaAED66121",
      ],
      "Properties": {
        "DestinationArn": {
          "Fn::GetAtt": [
            "LogStreamEventTriggerParserFunction924F8116",
            "Arn",
          ],
        },
        "FilterPattern": "{ ($.level = "ERROR") || ($.level = "WARN") }",
        "LogGroupName": "/aws/lambda/example-x2a-func",
      },
      "Type": "AWS::Logs::SubscriptionFilter",
    },
    "AwsLambdaExamplex3afuncLogGroupSubscriptionC027425C": {
      "DependsOn": [
        "AwsLambdaExamplex3afuncLogGroupSubscriptionCanInvokeLambdaF9904B14",
      ],
      "Properties": {
        "DestinationArn": {
          "Fn::GetAtt": [
            "LogStreamEventTriggerParserFunction924F8116",
            "Arn",
          ],
        },
        "FilterPattern": "{ ($.level = "ERROR") || ($.level = "WARN") }",
        "LogGroupName": "/aws/lambda/example-x3a-func",
      },
      "Type": "AWS::Logs::SubscriptionFilter",
    },
    "AwsLambdaExamplex3afuncLogGroupSubscriptionCanInvokeLambdaF9904B14": {
      "Properties": {
        "Action": "lambda:InvokeFunction",
        "FunctionName": {
          "Fn::GetAtt": [
            "LogStreamEventTriggerParserFunction924F8116",
            "Arn",
          ],
        },
        "Principal": "logs.amazonaws.com",
        "SourceArn": {
          "Fn::Join": [
            "",
            [
              "arn:",
              {
                "Ref": "AWS::Partition",
              },
              ":logs:",
              {
                "Ref": "AWS::Region",
              },
              ":",
              {
                "Ref": "AWS::AccountId",
              },
              ":log-group:/aws/lambda/example-x3a-func:*",
            ],
          ],
        },
      },
      "Type": "AWS::Lambda::Permission",
    },
    "LogStreamEventNotifierLambdaFunctionLogSubscriptionFuncSuccessRule4992E51C": {
      "Properties": {
        "EventPattern": {
          "detail": {
            "requestContext": {
              "functionArn": [
                {
                  "wildcard": {
                    "Fn::Join": [
                      "",
                      [
                        {
                          "Fn::GetAtt": [
                            "LogStreamEventTriggerParserFunction924F8116",
                            "Arn",
                          ],
                        },
                        ":*",
                      ],
                    ],
                  },
                },
              ],
            },
          },
          "detail-type": [
            "Lambda Function Invocation Result - Success",
          ],
          "source": [
            "lambda",
          ],
        },
        "State": "ENABLED",
        "Targets": [
          {
            "Arn": {
              "Ref": "LogStreamEventNotifierNotifierStateMachine7BF529E8",
            },
            "Id": "Target0",
            "RoleArn": {
              "Fn::GetAtt": [
                "LogStreamEventNotifierStartExecMachineRole87239070",
                "Arn",
              ],
            },
          },
        ],
      },
      "Type": "AWS::Events::Rule",
    },
    "LogStreamEventNotifierNotifierStateMachine7BF529E8": {
      "DeletionPolicy": "Delete",
      "DependsOn": [
        "LogStreamEventNotifierNotifierStateMachineRoleDefaultPolicy02CF583F",
        "LogStreamEventNotifierNotifierStateMachineRoleC4778DA6",
      ],
      "Properties": {
        "DefinitionString": {
          "Fn::Join": [
            "",
            [
              "{"StartAt":"Init","States":{"Init":{"Type":"Pass","Result":"","ResultPath":"$.Prepare.Concatenated.StackTrace","Next":"GetLogEvents"},"GetLogEvents":{"Type":"Pass","ResultPath":"$.Temp.Log","Parameters":{"Events.$":"$.detail.responsePayload.logEvents"},"Next":"CheckUntreatedLogEventDetailExist"},"CheckUntreatedLogEventDetailExist":{"Type":"Choice","Choices":[{"Variable":"$.Temp.Log.Events[0]","IsPresent":true,"Next":"GetLogEventDetail"}],"Default":"Succeed"},"GetUntreatedMessages":{"Type":"Pass","ResultPath":"$.TempStackTrace","Parameters":{"Lines.$":"$.TempStackTrace.Lines[1:]"},"Next":"CheckUntreatedLogEventDetailExist"},"SendNotification":{"Next":"GetUntreatedMessages","Type":"Task","InputPath":"$.Prepare.Sns.Topic","ResultPath":"$.Result.Sns.Topic","Resource":"arn:",
              {
                "Ref": "AWS::Partition",
              },
              ":states:::sns:publish","Parameters":{"TopicArn":"",
              {
                "Ref": "NotificationTopicEB7A0DF1",
              },
              "","Message.$":"$.Message","Subject.$":"$.Subject"}},"PrepareErrorTextMessage":{"Type":"Pass","ResultPath":"$.Prepare.Sns.Topic","Parameters":{"Subject.$":"States.Format('ðŸ˜µ[{}] AWS Lambda Function Invocation {} Log Found [{}][{}]', $.Temp.Log.Parsed.level, $.Temp.Log.Parsed.level, $.account, $.region)","Message.$":"States.Format('Account : {}\\nRegion : {}\\nLogGroup : {}\\nLogStream : {}\\nLogLevel : {}\\nTimestamp : {}\\nRequestId : {}\\nErrorType : {}\\nErrorMessage : {}\\nStackTrace : \\n{}', $.account, $.region, $.detail.responsePayload.logGroup, $.detail.responsePayload.logStream, $.Temp.Log.Parsed.level, $.Temp.Log.Parsed.timestamp, $.Temp.Log.Parsed.requestId, $.Temp.Log.Parsed.message.errorType, $.Temp.Log.Parsed.message.errorMessage, $.Prepare.Concatenated.StackTrace)"},"Next":"SendNotification"},"PrepareOtherTextMessage":{"Type":"Pass","ResultPath":"$.Prepare.Sns.Topic","Parameters":{"Subject.$":"States.Format('ðŸ˜µ[{}] AWS Lambda Function Invocation {} Log Found [{}][{}]', $.Temp.Log.Parsed.level, $.Temp.Log.Parsed.level, $.account, $.region)","Message.$":"States.Format('Account : {}\\nRegion : {}\\nLogGroup : {}\\nLogStream : {}\\nLogLevel : {}\\nTimestamp : {}\\nRequestId : {}\\nMessage : {}', $.account, $.region, $.detail.responsePayload.logGroup, $.detail.responsePayload.logStream, $.Temp.Log.Parsed.level, $.Temp.Log.Parsed.timestamp, $.Temp.Log.Parsed.requestId, $.Temp.Log.Parsed.message)"},"Next":"SendNotification"},"Succeed":{"Type":"Succeed"},"GetLogEventDetail":{"Type":"Pass","ResultPath":"$.Temp.Log.Event","Parameters":{"Detail.$":"States.ArrayGetItem($.Temp.Log.Events, 0)"},"Next":"GetLogEventMessage"},"GetLogEventMessage":{"Type":"Pass","ResultPath":"$.Temp.Log","Parameters":{"Parsed.$":"States.StringToJson($.Temp.Log.Event.Detail.message)"},"Next":"LogLevelChoice"},"LogLevelChoice":{"Type":"Choice","Choices":[{"Variable":"$.Temp.Log.Parsed.level","StringEquals":"ERROR","Next":"GetLogEventMessageStackTrace"}],"Default":"PrepareOtherTextMessage"},"GetLogEventMessageStackTrace":{"Type":"Pass","ResultPath":"$.Temp.StackTrace","Parameters":{"Lines.$":"$.Temp.Log.Parsed.message.stackTrace"},"Next":"CheckUntreatedMessageStackTraceLinesExist"},"CheckUntreatedMessageStackTraceLinesExist":{"Type":"Choice","Choices":[{"Variable":"$.Temp.StackTrace.Lines[0]","IsPresent":true,"Next":"GetLogEventMessageStackTraceLine"}],"Default":"PrepareErrorTextMessage"},"UntreatedMessageTraceLines":{"Type":"Pass","ResultPath":"$.Temp.StackTrace","Parameters":{"Lines.$":"$.Temp.StackTrace.Lines[1:]"},"Next":"CheckUntreatedMessageStackTraceLinesExist"},"ConcatenateStackTraceLine":{"Type":"Pass","ResultPath":"$.Prepare.Concatenated","Parameters":{"StackTrace.$":"States.Format('{}{}\\n', $.Prepare.Concatenated.StackTrace, $.Temp.GetStackTrace.Line)"},"Next":"UntreatedMessageTraceLines"},"GetLogEventMessageStackTraceLine":{"Type":"Pass","ResultPath":"$.Temp.GetStackTrace","Parameters":{"Line.$":"States.ArrayGetItem($.Temp.StackTrace.Lines, 0)"},"Next":"ConcatenateStackTraceLine"}},"TimeoutSeconds":300}",
            ],
          ],
        },
        "RoleArn": {
          "Fn::GetAtt": [
            "LogStreamEventNotifierNotifierStateMachineRoleC4778DA6",
            "Arn",
          ],
        },
      },
      "Type": "AWS::StepFunctions::StateMachine",
      "UpdateReplacePolicy": "Delete",
    },
    "LogStreamEventNotifierNotifierStateMachineRoleC4778DA6": {
      "Properties": {
        "AssumeRolePolicyDocument": {
          "Statement": [
            {
              "Action": "sts:AssumeRole",
              "Effect": "Allow",
              "Principal": {
                "Service": "states.amazonaws.com",
              },
            },
          ],
          "Version": "2012-10-17",
        },
      },
      "Type": "AWS::IAM::Role",
    },
    "LogStreamEventNotifierNotifierStateMachineRoleDefaultPolicy02CF583F": {
      "Properties": {
        "PolicyDocument": {
          "Statement": [
            {
              "Action": "sns:Publish",
              "Effect": "Allow",
              "Resource": {
                "Ref": "NotificationTopicEB7A0DF1",
              },
            },
          ],
          "Version": "2012-10-17",
        },
        "PolicyName": "LogStreamEventNotifierNotifierStateMachineRoleDefaultPolicy02CF583F",
        "Roles": [
          {
            "Ref": "LogStreamEventNotifierNotifierStateMachineRoleC4778DA6",
          },
        ],
      },
      "Type": "AWS::IAM::Policy",
    },
    "LogStreamEventNotifierStartExecMachineRole87239070": {
      "Properties": {
        "AssumeRolePolicyDocument": {
          "Statement": [
            {
              "Action": "sts:AssumeRole",
              "Effect": "Allow",
              "Principal": {
                "Service": "events.amazonaws.com",
              },
            },
          ],
          "Version": "2012-10-17",
        },
        "Description": "lambda func log subscription notification start exec machine (send notification).",
        "Policies": [
          {
            "PolicyDocument": {
              "Statement": [
                {
                  "Action": "states:StartExecution",
                  "Effect": "Allow",
                  "Resource": "*",
                },
              ],
              "Version": "2012-10-17",
            },
            "PolicyName": "states-start-execution-policy",
          },
        ],
      },
      "Type": "AWS::IAM::Role",
    },
    "LogStreamEventNotifierStartExecMachineRoleDefaultPolicyF28677A4": {
      "Properties": {
        "PolicyDocument": {
          "Statement": [
            {
              "Action": "states:StartExecution",
              "Effect": "Allow",
              "Resource": {
                "Ref": "LogStreamEventNotifierNotifierStateMachine7BF529E8",
              },
            },
          ],
          "Version": "2012-10-17",
        },
        "PolicyName": "LogStreamEventNotifierStartExecMachineRoleDefaultPolicyF28677A4",
        "Roles": [
          {
            "Ref": "LogStreamEventNotifierStartExecMachineRole87239070",
          },
        ],
      },
      "Type": "AWS::IAM::Policy",
    },
    "LogStreamEventTriggerParserFunction924F8116": {
      "DependsOn": [
        "LogStreamEventTriggerParserFunctionRoleDefaultPolicy79BB7F36",
        "LogStreamEventTriggerParserFunctionRole03C40C6D",
      ],
      "Properties": {
        "Architectures": [
          "arm64",
        ],
        "Code": {
          "S3Bucket": {
            "Fn::Sub": "cdk-hnb659fds-assets-\${AWS::AccountId}-\${AWS::Region}",
          },
          "S3Key": "b6f5fc16edd93ad984ac3f2446874944958c4e3ac936bfbf09b570fa87b5ae1d.zip",
        },
        "Description": "src/funcs/parser.lambda.ts",
        "Environment": {
          "Variables": {
            "AWS_NODEJS_CONNECTION_REUSE_ENABLED": "1",
          },
        },
        "Handler": "index.handler",
        "LoggingConfig": {
          "ApplicationLogLevel": "INFO",
          "LogFormat": "JSON",
          "LogGroup": {
            "Ref": "LogStreamEventTriggerParserFunctionLogGroupCE8F34C7",
          },
          "SystemLogLevel": "INFO",
        },
        "Role": {
          "Fn::GetAtt": [
            "LogStreamEventTriggerParserFunctionRole03C40C6D",
            "Arn",
          ],
        },
        "Runtime": "nodejs22.x",
        "Timeout": 10,
      },
      "Type": "AWS::Lambda::Function",
    },
    "LogStreamEventTriggerParserFunctionEventInvokeConfig5B81DAB6": {
      "Properties": {
        "DestinationConfig": {
          "OnSuccess": {
            "Destination": {
              "Fn::Join": [
                "",
                [
                  "arn:",
                  {
                    "Ref": "AWS::Partition",
                  },
                  ":events:",
                  {
                    "Ref": "AWS::Region",
                  },
                  ":",
                  {
                    "Ref": "AWS::AccountId",
                  },
                  ":event-bus/default",
                ],
              ],
            },
          },
        },
        "FunctionName": {
          "Ref": "LogStreamEventTriggerParserFunction924F8116",
        },
        "Qualifier": "$LATEST",
      },
      "Type": "AWS::Lambda::EventInvokeConfig",
    },
    "LogStreamEventTriggerParserFunctionLogGroupCE8F34C7": {
      "DeletionPolicy": "RetainExceptOnCreate",
      "Properties": {
        "RetentionInDays": 90,
      },
      "Type": "AWS::Logs::LogGroup",
      "UpdateReplacePolicy": "Retain",
    },
    "LogStreamEventTriggerParserFunctionRole03C40C6D": {
      "Properties": {
        "AssumeRolePolicyDocument": {
          "Statement": [
            {
              "Action": "sts:AssumeRole",
              "Effect": "Allow",
              "Principal": {
                "Service": "lambda.amazonaws.com",
              },
            },
          ],
          "Version": "2012-10-17",
        },
        "ManagedPolicyArns": [
          {
            "Fn::Join": [
              "",
              [
                "arn:",
                {
                  "Ref": "AWS::Partition",
                },
                ":iam::aws:policy/service-role/AWSLambdaBasicExecutionRole",
              ],
            ],
          },
        ],
        "Policies": [
          {
            "PolicyDocument": {
              "Statement": [
                {
                  "Action": "events:PutEvents",
                  "Effect": "Allow",
                  "Resource": {
                    "Fn::Join": [
                      "",
                      [
                        "arn:",
                        {
                          "Ref": "AWS::Partition",
                        },
                        ":events:",
                        {
                          "Ref": "AWS::Region",
                        },
                        ":",
                        {
                          "Ref": "AWS::AccountId",
                        },
                        ":event-bus/default",
                      ],
                    ],
                  },
                },
              ],
              "Version": "2012-10-17",
            },
            "PolicyName": "put-events-policy",
          },
        ],
      },
      "Type": "AWS::IAM::Role",
    },
    "LogStreamEventTriggerParserFunctionRoleDefaultPolicy79BB7F36": {
      "Properties": {
        "PolicyDocument": {
          "Statement": [
            {
              "Action": "events:PutEvents",
              "Effect": "Allow",
              "Resource": {
                "Fn::Join": [
                  "",
                  [
                    "arn:",
                    {
                      "Ref": "AWS::Partition",
                    },
                    ":events:",
                    {
                      "Ref": "AWS::Region",
                    },
                    ":",
                    {
                      "Ref": "AWS::AccountId",
                    },
                    ":event-bus/default",
                  ],
                ],
              },
            },
          ],
          "Version": "2012-10-17",
        },
        "PolicyName": "LogStreamEventTriggerParserFunctionRoleDefaultPolicy79BB7F36",
        "Roles": [
          {
            "Ref": "LogStreamEventTriggerParserFunctionRole03C40C6D",
          },
        ],
      },
      "Type": "AWS::IAM::Policy",
    },
    "NotificationTopicEB7A0DF1": {
      "Type": "AWS::SNS::Topic",
    },
    "NotificationTopicbarexamplecom9EB28562": {
      "Properties": {
        "Endpoint": "bar@example.com",
        "Protocol": "email",
        "TopicArn": {
          "Ref": "NotificationTopicEB7A0DF1",
        },
      },
      "Type": "AWS::SNS::Subscription",
    },
    "NotificationTopicfooexamplecom623834B6": {
      "Properties": {
        "Endpoint": "foo@example.com",
        "Protocol": "email",
        "TopicArn": {
          "Ref": "NotificationTopicEB7A0DF1",
        },
      },
      "Type": "AWS::SNS::Subscription",
    },
  },
  "Rules": {
    "CheckBootstrapVersion": {
      "Assertions": [
        {
          "Assert": {
            "Fn::Not": [
              {
                "Fn::Contains": [
                  [
                    "1",
                    "2",
                    "3",
                    "4",
                    "5",
                  ],
                  {
                    "Ref": "BootstrapVersion",
                  },
                ],
              },
            ],
          },
          "AssertDescription": "CDK bootstrap stack version 6 required. Please run 'cdk bootstrap' with a recent version of the CDK CLI.",
        },
      ],
    },
  },
}
`;
